{"version":3,"sources":["context/TaskListContext.js","component/Task.js","component/TaskList.js","component/TaskForm.js","component/Header.js","component/App.js","serviceWorker.js","index.js"],"names":["TaskListContext","createContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","editItem","setEditItem","useEffect","setItem","stringify","Provider","value","addTask","title","id","uuidv4","removeTask","filter","task","clearList","findItem","item","find","editTask","newTask","map","children","Task","useContext","className","onClick","TaskList","length","key","TaskForm","setTitle","onSubmit","e","preventDefault","type","onChange","target","placeholder","required","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f5441283.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const TaskListContext = createContext();\r\n\r\nconst TaskListContextProvider = props => {\r\n   const initialState = JSON.parse(localStorage.getItem('tasks')) || [];\r\n\r\n   const [tasks, setTasks] = useState(initialState);\r\n\r\n   const [editItem, setEditItem] = useState(null);\r\n\r\n   useEffect(() => {\r\n      localStorage.setItem('tasks', JSON.stringify(tasks));\r\n   }, [tasks]);\r\n\r\n   const addTask = title => {\r\n      setTasks([...tasks, { title, id: uuidv4() }]);\r\n   };\r\n\r\n   const removeTask = id => {\r\n      setTasks(tasks.filter(task => task.id !== id));\r\n   };\r\n\r\n   const clearList = () => {\r\n      setTasks([]);\r\n   };\r\n\r\n   const findItem = id => {\r\n      const item = tasks.find(task => task.id === id);\r\n\r\n      setEditItem(item);\r\n   };\r\n\r\n   const editTask = (title, id) => {\r\n      const newTask = tasks.map(task =>\r\n         task.id === id ? { title, id } : task\r\n      );\r\n\r\n      setTasks(newTask);\r\n      setEditItem(null);\r\n   };\r\n\r\n   return (\r\n      <TaskListContext.Provider\r\n         value={{\r\n            tasks,\r\n            addTask,\r\n            removeTask,\r\n            clearList,\r\n            findItem,\r\n            editTask,\r\n            editItem\r\n         }}\r\n      >\r\n         {props.children}\r\n      </TaskListContext.Provider>\r\n   );\r\n};\r\n\r\nexport default TaskListContextProvider;\r\n","import React, { useContext } from 'react';\r\nimport { TaskListContext } from '../context/TaskListContext';\r\n\r\nconst Task = ({ task }) => {\r\n   const { removeTask, findItem } = useContext(TaskListContext);\r\n\r\n   return (\r\n      <li className=\"list-item\">\r\n         <span>{task.title}</span>\r\n         <div>\r\n            <button\r\n               onClick={() => removeTask(task.id)}\r\n               className=\"btn-delete task-btn\"\r\n            >\r\n               <i className=\"fas fa-trash-alt\"></i>\r\n            </button>\r\n\r\n            <button\r\n               onClick={() => findItem(task.id)}\r\n               className=\"btn-edit task-btn\"\r\n            >\r\n               <i className=\"fas fa-pen\"></i>\r\n            </button>\r\n         </div>\r\n      </li>\r\n   );\r\n};\r\n\r\nexport default Task;\r\n","import React, { useContext } from 'react';\r\nimport { TaskListContext } from '../context/TaskListContext';\r\nimport Task from './Task';\r\n\r\nconst TaskList = () => {\r\n   const { tasks } = useContext(TaskListContext);\r\n   return (\r\n      <div>\r\n         {tasks.length ? (\r\n            <ul className=\"list\">\r\n               {tasks.map(task => {\r\n                  return <Task task={task} key={task.id} />;\r\n               })}\r\n            </ul>\r\n         ) : (\r\n            <div className=\"no-tasks\">No Tasks</div>\r\n         )}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { TaskListContext } from '../context/TaskListContext';\r\n\r\nconst TaskForm = () => {\r\n   const { addTask, clearList, editItem, editTask } = useContext(\r\n      TaskListContext\r\n   );\r\n\r\n   const [title, setTitle] = useState('');\r\n   const handleChange = e => {\r\n      setTitle(e.target.value);\r\n   };\r\n   const handleSubmit = e => {\r\n      e.preventDefault();\r\n      if (!editItem) {\r\n         addTask(title);\r\n         setTitle('');\r\n      } else {\r\n         editTask(title, editItem.id);\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (editItem) {\r\n         setTitle(editItem.title);\r\n      } else {\r\n         setTitle('');\r\n      }\r\n   }, [editItem]);\r\n   return (\r\n      <form onSubmit={handleSubmit} className=\"form\">\r\n         <div className=\"form-wrapper\">\r\n            <input\r\n               type=\"text\"\r\n               className=\"task-input\"\r\n               onChange={handleChange}\r\n               value={title}\r\n               placeholder=\"Add Task..\"\r\n               required\r\n            />\r\n            <button type=\"submit\" className=\"btn add-task-btn\">\r\n               {editItem ? 'Edit Task' : 'Add Task'}\r\n            </button>\r\n            <button onClick={clearList} className=\"btn clear-btn\">\r\n               Clear\r\n            </button>\r\n         </div>\r\n      </form>\r\n   );\r\n};\r\n\r\nexport default TaskForm;\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n   return (\r\n      <div className=\"header\">\r\n         <h1>Task Maneger</h1>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport TaskList from './TaskList';\nimport TaskListContextProvider from '../context/TaskListContext';\nimport '../App.css';\nimport TaskForm from './TaskForm';\nimport Header from './Header';\nconst App = () => {\n   return (\n      <div className=\"App\">\n         <TaskListContextProvider>\n            <div className=\"container\">\n               <div className=\"app-wrapper\">\n                  <Header />\n                  <div className=\"main\">\n                     <TaskForm />\n                     <TaskList />\n                  </div>\n               </div>\n            </div>\n         </TaskListContextProvider>\n      </div>\n   );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}